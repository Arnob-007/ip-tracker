{"version":3,"sources":["Components/Header/icon-arrow.svg","Components/Map/icon-location.svg","Components/Header/Header.js","Components/Info/Info.js","Components/Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","setIP","useState","ipTyping","setIpTyping","id","className","placeholder","type","onChange","e","target","value","onClick","preventDefault","src","require","alt","InfoSection","title","Info","ipInfo","ip","region","city","timezone_gmt","isp","Map","latitude","longitude","country_flag","org","country","continent","position","markerIcon","Icon","iconUrl","iconSize","center","zoom","TileLayer","url","attribution","Marker","icon","Popup","App","IP","setIpInfo","isError","setIsError","handleError","setTimeout","useEffect","fetch","then","res","json","data","success","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.e8b7d052.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-arrow.53ef8ed8.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-location.ff171469.svg\";","import React, { useState } from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = ({ setIP }) => {\r\n\tconst [ipTyping, setIpTyping] = useState(\"\");\r\n\r\n\tconst handleIP = (e) => {\r\n\t\te.preventDefault();\r\n\t\tipTyping && setIP(ipTyping);\r\n\t\tsetIpTyping(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form id='header' className='header'>\r\n\t\t\t<h2>IP Address Tracker</h2>\r\n\t\t\t<div className='header__search'>\r\n\t\t\t\t<input\r\n\t\t\t\t\tplaceholder='Enter IP'\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tonChange={(e) => setIpTyping(e.target.value)}\r\n\t\t\t\t\tvalue={ipTyping}\r\n\t\t\t\t/>\r\n\t\t\t\t<button type='submit' onClick={handleIP}>\r\n\t\t\t\t\t<img src={require(\"./icon-arrow.svg\")} alt='search' />\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Info.css\";\r\n\r\nconst Info = ({ ipInfo }) => {\r\n\tconst { ip, region, city, timezone_gmt, isp } = ipInfo;\r\n\r\n\treturn (\r\n\t\t<div className='info__container'>\r\n\t\t\t<div className='info'>\r\n\t\t\t\t<InfoSection title='IP ADDRESS' value={ip ? ip : \"N/A\"} />\r\n\t\t\t\t<InfoSection\r\n\t\t\t\t\ttitle='LOCATION'\r\n\t\t\t\t\tvalue={region ? region + \", \" + city : \"N/A\"}\r\n\t\t\t\t/>\r\n\t\t\t\t<InfoSection\r\n\t\t\t\t\ttitle='TIMEZONE'\r\n\t\t\t\t\tvalue={timezone_gmt ? timezone_gmt : \"N/A\"}\r\n\t\t\t\t/>\r\n\t\t\t\t<InfoSection title='ISP' value={isp ? isp : \"N/A\"} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst InfoSection = ({ title, value }) => {\r\n\treturn (\r\n\t\t<div className='info__section'>\r\n\t\t\t<h5 className='section__title'>{title}</h5>\r\n\t\t\t<h3>{value}</h3>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\nimport { Map as LMap, Marker, Popup, TileLayer } from \"react-leaflet\";\r\nimport { Icon } from \"leaflet\";\r\nimport \"./Map.css\";\r\n\r\nconst Map = ({ ipInfo }) => {\r\n\tconst {\r\n\t\tlatitude,\r\n\t\tlongitude,\r\n\t\tcountry_flag,\r\n\t\torg,\r\n\t\tregion,\r\n\t\tcountry,\r\n\t\tcontinent,\r\n\t} = ipInfo;\r\n\r\n\tconst position = [latitude, longitude];\r\n\r\n\tconst markerIcon = new Icon({\r\n\t\ticonUrl: require(\"./icon-location.svg\"),\r\n\t\ticonSize: [50, 60],\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div id='map' className='map'>\r\n\t\t\t<LMap className='map' center={position} zoom={18}>\r\n\t\t\t\t<TileLayer\r\n\t\t\t\t\turl='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n\t\t\t\t\tattribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\t\t\t\t/>\r\n\t\t\t\t<Marker position={position} icon={markerIcon}>\r\n\t\t\t\t\t<Popup>\r\n\t\t\t\t\t\t<img className='popup__flag' src={country_flag} alt='flag' />\r\n\t\t\t\t\t\t<h4>{org}</h4>\r\n\t\t\t\t\t\t<h5>{region}</h5>\r\n\t\t\t\t\t\t<h5>{country}</h5>\r\n\t\t\t\t\t\t<h5>Continent: {continent}</h5>\r\n\t\t\t\t\t</Popup>\r\n\t\t\t\t</Marker>\r\n\t\t\t</LMap>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Components/Header/Header\";\nimport Info from \"./Components/Info/Info\";\nimport Map from \"./Components/Map/Map\";\n\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n\tconst [IP, setIP] = useState(\"\");\n\tconst [ipInfo, setIpInfo] = useState(null);\n\tconst [isError, setIsError] = useState(false);\n\n\tconst handleError = () => {\n\t\t!isError && setIsError(true);\n\t\tsetTimeout(() => setIsError(false), 2000);\n\t};\n\n\tuseEffect(() => {\n\t\tfetch(`https://ipwhois.app/json/${IP}`)\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => (data.success ? setIpInfo(data) : handleError()))\n\t\t\t.catch((err) => handleError());\n\t}, [IP]);\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Header setIP={setIP} />\n\t\t\t{ipInfo && (\n\t\t\t\t<>\n\t\t\t\t\t<Info ipInfo={ipInfo} />\n\t\t\t\t\t<Map ipInfo={ipInfo} />\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{isError && (\n\t\t\t\t<div className='error__modal'>\n\t\t\t\t\t<h5>COULDN'T GET IP DETAILS</h5>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}